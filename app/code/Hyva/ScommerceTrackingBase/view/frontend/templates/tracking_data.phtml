<?php
/** @var $block Magento\Framework\View\Element\Template */
/** @var Scommerce\TrackingBase\ViewModel\TrackingDataContainer $viewModel */
$viewModel = $block->getData('view_model');
if (!$viewModel->isEnabled()) {
    return;
}
$productToWishlist = $viewModel->getProductToWishlist();
$skipPageReady = $block->getSkipPageReady();
$consentModeEnabled = $viewModel->isConsentModeEnabled();
$consentModeData = $viewModel->getConsentCookiesConfiguration();
?>
<script>
    let scUpdating = false, scClicked = false;
    let consentModeConfig = <?= json_encode($consentModeData) ?>;
    let defaultConsentSent = false;
    let ready = function (fn) {
        if (document.readyState !== 'loading') {
            fn();
        } else {
            document.addEventListener('DOMContentLoaded', fn);
        }
    };

    function gtag(){dataLayer.push(arguments);}

    function getCookie(name) {
        let cookieArr = document.cookie.split(";");

        for(let i = 0; i < cookieArr.length; i++) {
            let cookiePair = cookieArr[i].split("=");

            if(name == cookiePair[0].trim()) {
                return decodeURIComponent(cookiePair[1]);
            }
        }

        return null;
    }

    function sendConsentData() {
        <?php if ($consentModeEnabled): ?>
        let consentDefault = {};
        let consentUpdate = {};
        let instantUpdate = false;
        for (var consent in consentModeConfig) {
            consentDefault[consent] = consentModeConfig[consent]['default_value'];
            consentUpdate[consent] = consentModeConfig[consent]['default_value'];
            consentCookie = consentModeConfig[consent]['cookie_name'];
            consentCookieValue = getCookie(consentCookie);
            if (consentCookie === "" || consentCookieValue === undefined) {
                consentValue = consentModeConfig[consent]['default_value'];
            } else {
                if (consentCookieValue == 1) {
                    consentValue = 'granted';
                } else {
                    consentValue = 'denied';
                }
                if (consentValue !== consentModeConfig[consent]['default_value']) {
                    instantUpdate = true;
                    consentUpdate[consent] = consentValue;
                }
            }

        }
        if (sessionStorage.getItem('consentDefault') === null) {
            //send default
            if (!defaultConsentSent) {
                gtag('consent', 'default', consentDefault);
                sessionStorage.setItem('consentDefault', JSON.stringify(consentDefault));
                defaultConsentSent = true;
            }
            //send update
            if (instantUpdate) {
                gtag('consent', 'update', consentUpdate);
                sessionStorage.setItem('consentDefault', JSON.stringify(consentUpdate))
            }
        } else {
            oldConsent = JSON.parse(sessionStorage.getItem('consentDefault'));
            needUpdate = false;
            consentDefault = {};
            for (var consentConfig in consentModeConfig) {
                consentCookie = consentModeConfig[consentConfig]['cookie_name'];
                consentCookieValue = getCookie(consentCookie);
                if (consentCookie === "" || consentCookieValue === undefined) {
                    consentValue = consentModeConfig[consentConfig]['default_value'];
                } else {
                    if (consentCookieValue == 1) {
                        consentValue = 'granted';
                    } else {
                        consentValue = 'denied';
                    }
                }
                consentDefault[consentConfig] = consentValue;
                if (oldConsent[consentConfig] == undefined) {
                    needUpdate = true;
                } else {
                    if (oldConsent[consentConfig] !== consentValue) {
                        needUpdate = true;
                    }
                }
            }

            if (!defaultConsentSent) {
                gtag('consent', 'default', consentDefault);
                sessionStorage.setItem('consentDefault', JSON.stringify(consentDefault));
                defaultConsentSent = true;
            } else {
                if (needUpdate) {
                    gtag('consent', 'update', consentDefault);
                    sessionStorage.setItem('consentDefault', JSON.stringify(consentDefault));
                }
            }
        }
        <?php endif; ?>
    }

    function _gaAddToCart() {
        if (scClicked === false) return;
        if (scUpdating === true) return;
        scUpdating = true;
        fetch('<?= $escaper->escapeUrl($block->getBaseUrl()) ?>sctracking/index/addtocart')
            .then((response) => response.json())
            .then((product) => {
                if (product == null) return;
                for (let i = 0; i < product.length; i++) {
                    product[i].list = window.scTrackingContainer.getProductImpression(product[i].allSkus);
                }
                window.scTrackingContainer.setAddToCart(product);
                fetch('<?= $escaper->escapeUrl($block->getBaseUrl()) ?>sctracking/index/unsaddtocart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({product})
                }).then((response) => response.json());
            }).catch(function (error) {

        }).then(function () {
            scUpdating = false;
            scClicked = false;
        });
    }

    window.scTrackingContainer.setPageType('<?php echo $viewModel->getPageType($block) ?>');
    window.scTrackingContainer.setSendDefaultList('<?php echo $viewModel->getSendDefaultList() ?>');
    window.scTrackingContainer.setDefaultList('<?php echo $viewModel->getDefaultList() ?>');
    window.scTrackingContainer.setCurrency('<?php echo $viewModel->getCurrency() ?>');
    window.scTrackingContainer.setData('isGuest', <?php echo $viewModel->isGuest() ?>);

    let promotions = [];
    let intCtr = 0;
    ready(function () {
        document.addEventListener('ajax:addToCart', function () {
            scClicked = true;
            _gaAddToCart();
        });

        document.addEventListener("scommerceCookieSaved", function () {
            sendConsentData();
        });

        sendConsentData();

        <?php if ($viewModel->getProductToBasket()):
        $productToBasket = $viewModel->getProductToBasket();
        ?>
        let cartData = <?php echo json_encode($productToBasket) ?>;
        <?php if (!isset($productToBasket[0]['list'])): ?>
        for (let i = 0; i < cartData.length; i++) {
            let impression = window.scTrackingContainer.getProductImpression(cartData[i].allSkus);
            cartData[i].list = impression;
            window.scTrackingContainer.sendQuoteImpression(cartData[i]['_realProductId'], impression);
        }
        <?php endif; ?>
        window.scTrackingContainer.setAddToCart(cartData);
        <?php endif; ?>

        <?php if ($viewModel->getProductOutBasket()): ?>
        window.scTrackingContainer.setRemoveFromCart(<?php echo $viewModel->getProductOutBasket() ?>);
        <?php endif; ?>

        <?php if ($productToWishlist): ?>
        let wishlistData = <?php echo json_encode($productToWishlist) ?>;
        wishlistData.item.list = window.scTrackingContainer.getProductImpression(wishlistData.item.allSkus);
        window.scTrackingContainer.setAddToWishlist(wishlistData);
        <?php else: ?>
        document.querySelectorAll('a.towishlist').forEach(element => {
            element.addEventListener('click', function () {
                var wishlistData = element.dataset.post;
                var itemId = wishlistData.data.product;
                setTimeout(function () {
                    fetch('<?= $escaper->escapeUrl($block->getBaseUrl()) ?>sctracking/index/addtowishlist', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({itemId: itemId})
                    }).then((response) => response.json())
                        .then((product) => {
                            if (product == null) return;
                            window.scTrackingContainer.setAddToWishlist(product);
                        });
                }, 1000);
            });
        });
        <?php endif; ?>

        document.querySelectorAll('a').forEach(element => {
            element.addEventListener('click', function () {
                let href = element.getAttribute("href");
                let product = window.scTrackingContainer.findProductByUrl(href);
                if (product !== undefined && product != false) {
                    window.scTrackingContainer.setProductImpression(product.id, product.list);
                    window.scTrackingContainer.fire('item_click', product);
                }
            });
        });

        document.querySelectorAll('a[data-promotion]').forEach(element => {
            if (element.dataset.promotion == !0) {
                let id = element.dataset.id;
                let name = element.dataset.name;
                let creative = element.dataset.creative;
                let position = element.dataset.position;
                let slot = element.dataset.slot;
                let promotion = {
                    'id': id,                         // Name or ID is required.
                    'name': name,
                    'creative': creative,
                    'position': position,
                    'slot': slot
                };
                promotions.push(promotion);
                intCtr++;
                element.addEventListener('click', function () {
                    promotion.href = element.getAttribute("href");
                    window.scTrackingContainer.fire('promo_click', promotion);
                });
            }
            if (intCtr > 0) {
                window.scTrackingContainer.setPromotions(promotions);
            }
        });
    });

    <?php if (!$skipPageReady): ?>
    ready(function() {
        window.scTrackingContainer.fire('page_ready', window.scTrackingContainer.getPageType().toLowerCase());
    });
    <?php endif; ?>
</script>
